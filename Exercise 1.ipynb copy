{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gremlin_python import statics\n",
    "from gremlin_python.structure.graph import Graph\n",
    "from gremlin_python.process.graph_traversal import __\n",
    "from gremlin_python.process.strategies import *\n",
    "from gremlin_python.driver.driver_remote_connection import DriverRemoteConnection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph = Graph()\n",
    "connection = DriverRemoteConnection('ws://localhost:8182/gremlin', 'g')\n",
    "# The connection should be closed on shut down to close open connections with connection.close()\n",
    "g = graph.traversal().withRemote(connection)\n",
    "# Reuse 'g' across the application"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['V'], ['drop'], ['none'], ['values', '_ipython_canary_method_should_not_exist_'], ['values', '_ipython_canary_method_should_not_exist_']]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.V().drop().iterate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "v[82016]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.addV('node').property().next()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "None == None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[v[82016]]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.V().toList()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getOrCreate(name):\n",
    "    if name == 'None':\n",
    "        return None\n",
    "    vertex = g.V().has(name, 'name', name).toList()\n",
    "    if len(vertex) != 0:\n",
    "        return vertex[0]\n",
    "    return g.addV(name).property('name', name).next()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(g.V().toList()) == 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "v[86112]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.V().has('node', 'name', 'sn').toList()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "with open('data/alerts.csv', 'r') as file:\n",
    "    for line in file:\n",
    "        columns = line.strip().split(',')\n",
    "        v1 = getOrCreate(columns[0])\n",
    "        v2 = getOrCreate(columns[1])\n",
    "        v3 = getOrCreate(columns[2])\n",
    "        e1 = g.V(v2).addE('is').to(v1).property('type', 'is').iterate()\n",
    "        if v3 != None:\n",
    "            e2 = g.V(v3).addE('is').to(v1).property('type', 'is').iterate()\n",
    "            e3 = g.V(v2).addE('knows').to(v3).property('type', 'knows').iterate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'type': 'is'}, {'type': 'is'}, {'type': 'knows'}, {'type': 'knows'}]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.V().has('ztf2', 'name', 'ztf2').bothE().valueMap().toList()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'name': ['rrlyr']},\n",
       " {'name': ['ztf22']},\n",
       " {'name': ['ztf23']},\n",
       " {'name': ['sn']},\n",
       " {'name': ['ztf8']},\n",
       " {'name': ['ztf7']},\n",
       " {'name': ['ztf6']},\n",
       " {'name': ['ztf1']},\n",
       " {'name': ['ztf13']},\n",
       " {'name': ['ztf21']},\n",
       " {'name': ['ztf12']},\n",
       " {'name': ['ztf14']},\n",
       " {'name': ['ztf4']},\n",
       " {'name': ['unknown']},\n",
       " {'name': ['ztf2']},\n",
       " {'name': ['ztf3']},\n",
       " {'name': ['ztf11']},\n",
       " {'name': ['ztf9']},\n",
       " {'name': ['ztf5']}]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "verticesList = g.V().valueMap().toList()\n",
    "verticesList"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sn\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "with open('exercise2.txt', 'w') as file:\n",
    "    file.write(\"QUERY 1:\\n\")\n",
    "    for vertex in verticesList:\n",
    "        nodeName = vertex['name'][0]\n",
    "        inDegree = g.V().has(nodeName, 'name', nodeName).inE().count()\n",
    "        outDegree = g.V().has(nodeName, 'name', nodeName).outE().count()\n",
    "        overallDegree = g.V().has(nodeName, 'name', nodeName).both().count()\n",
    "        file.write(\"For node {:20s}\\n\".format(nodeName))\n",
    "        file.write(\"In degree      -> {:20s}\\n\".format(str(inDegree.toList()[0])))\n",
    "        file.write(\"Out degree     -> {:20s}\\n\".format(str(outDegree.toList()[0])))\n",
    "        file.write(\"Overall degree -> {:20s}\\n\".format(str(overallDegree.toList()[0])))\n",
    "\n",
    "    file.write(\"\\n\\n\")    \n",
    "    file.write(\"*\"*40)\n",
    "    file.write(\"\\n\\n\")\n",
    "    \n",
    "    file.write(\"QUERY 2:\\n\")\n",
    "    \n",
    "    maximumChainLength = 0\n",
    "    maximumChainVertex = 0\n",
    "    \n",
    "    for vertex in verticesList:\n",
    "        \n",
    "        nodeName = vertex['name'][0]\n",
    "        longestChainLength = g.V().has(nodeName, 'name',nodeName).repeat(__.inE().outV()).emit().tail().path().unfold().count().toList()[0]\n",
    "#         print(\"LONGEST CHAIN LENGTH:\", longestChainLength)\n",
    "        file.write(\"For node {:20s}\\n\".format(nodeName))\n",
    "        file.write(\"Longest Chain for this Node -> {}\\n\".format(longestChainLength))\n",
    "        \n",
    "        if longestChainLength >= maximumChainLength:\n",
    "            maximumChainLength = longestChainLength\n",
    "            maximumChainVertex = nodeName\n",
    "            \n",
    "    file.write(\"*\"*20)\n",
    "    file.write(\"\\nLongest Chain   -> {}\\n\".format(maximumChainLength))\n",
    "    file.write(\"Longest Path:\\n\")\n",
    "    \n",
    "    print(maximumChainVertex)\n",
    "    print(longestChainLength)\n",
    "    for path in g.V().has(maximumChainVertex, 'name', maximumChainVertex).repeat(\n",
    "        __.inE().outV()).emit().path().by(__.label()).toList():\n",
    "        if len(path) == maximumChainLength:\n",
    "            for node in path:\n",
    "                file.write(\"{} \".format(node))\n",
    "                file.write(\"<- \")\n",
    "            file.write(\"start\\n\")\n",
    "    \n",
    "    \n",
    "    file.write(\"\\n\\n\")    \n",
    "    file.write(\"*\"*40)\n",
    "    file.write(\"\\n\\n\")\n",
    "    \n",
    "    file.write(\"QUERY 3:\\n\")\n",
    "    \n",
    "    connectedVerticesCount = g.V().has('ztf4', 'name', 'ztf4').both().count().toList()[0]\n",
    "    connectedVertices = g.V().has('ztf4', 'name', 'ztf4').both().valueMap().toList()\n",
    "    file.write(\"Vertices connected to ztf4  -> {}\\n\".format(connectedVerticesCount))\n",
    "    file.write(\"The vertices are \")\n",
    "    for vertex in connectedVertices:\n",
    "        file.write(\"{} \".format(vertex['name'][0]))\n",
    "        \n",
    "        \n",
    "    file.write(\"\\n\\n\")    \n",
    "    file.write(\"*\"*40)\n",
    "    file.write(\"\\n\\n\")\n",
    "    \n",
    "    file.write(\"QUERY 4:\\n\")\n",
    "    \n",
    "    subGraph = g.V().has('unknown', 'name', 'unknown').bothE().as_('edge').otherV().as_(\n",
    "    'vertex').dedup().select('edge', 'vertex').by(__.valueMap()).toList()\n",
    "    file.write(\"Nodes and edges in subgraph:\\n\")\n",
    "    for node in subGraph:\n",
    "        file.write(\"{} {} unknown\\n\".format(node['vertex']['name'][0],\n",
    "                                         node['edge']['type']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.V().has('sn','name','sn').repeat(__.inE().outV()).emit().tail().path().unfold().count().toList()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "3\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "5\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "7\n",
      "9\n",
      "9\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "for x in g.V().has('sn', 'name', 'sn').repeat(\n",
    "    __.inE().outV()).emit().path().by(__.label()).toList():\n",
    "    print(len(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'sn'"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.V().has('ztf4','name','ztf4').both().valueMap().toList()[0]['name'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sn\n",
      "is\n",
      "ztf8\n",
      "knows\n",
      "ztf7\n",
      "knows\n",
      "ztf6\n",
      "knows\n",
      "ztf5\n"
     ]
    }
   ],
   "source": [
    "for x in g.V().has('sn','name','sn').repeat(__.inE().outV()).emit().tail(1).path().by(__.label()):\n",
    "    for y in x:\n",
    "        print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "session = client.Client('ws://localhost:8182/gremlin', 'g', message_serializer=GraphSONSerializersV3d0())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'edge': e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '2c5y-41io-5jp-8988'}}][188592-is->385208],\n",
       "  'vertex': v[188592]},\n",
       " {'edge': e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '4yks-7q74-5jp-8988'}}][360544-is->385208],\n",
       "  'vertex': v[360544]},\n",
       " {'edge': e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '51qv-8ce0-5jp-8988'}}][389304-is->385208],\n",
       "  'vertex': v[389304]}]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.V().has('unknown', 'name', 'unknown').bothE().as_('edge').otherV().as_(\n",
    "    'vertex').dedup().select('edge', 'vertex').by(__.valueMap(True)).toList()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = \"g.V().has('unknown', 'name', 'unknown').inE().subgraph('subgraph').cap('subgraph').next()\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = session.submit(query)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'v': {'name': ['ztf6']}, 'edges': [{}, {}, {}, {}]},\n",
       " {'v': {'name': ['unknown']}, 'edges': []},\n",
       " {'v': {'name': ['ztf22']}, 'edges': [{}, {}]},\n",
       " {'v': {'name': ['ztf23']}, 'edges': [{}, {}]},\n",
       " {'v': {'name': ['sn']}, 'edges': []},\n",
       " {'v': {'name': ['ztf7']}, 'edges': [{}, {}, {}]},\n",
       " {'v': {'name': ['ztf9']}, 'edges': [{}, {}]},\n",
       " {'v': {'name': ['ztf11']}, 'edges': [{}, {}]},\n",
       " {'v': {'name': ['ztf2']}, 'edges': [{}, {}, {}]},\n",
       " {'v': {'name': ['ztf12']}, 'edges': [{}, {}, {}]},\n",
       " {'v': {'name': ['ztf5']}, 'edges': [{}, {}]},\n",
       " {'v': {'name': ['rrlyr']}, 'edges': []},\n",
       " {'v': {'name': ['ztf4']}, 'edges': [{}]},\n",
       " {'v': {'name': ['ztf13']}, 'edges': [{}]},\n",
       " {'v': {'name': ['ztf8']}, 'edges': [{}]},\n",
       " {'v': {'name': ['ztf14']}, 'edges': [{}]},\n",
       " {'v': {'name': ['ztf1']}, 'edges': [{}, {}]},\n",
       " {'v': {'name': ['ztf21']}, 'edges': [{}]},\n",
       " {'v': {'name': ['ztf3']}, 'edges': [{}, {}, {}]}]"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.V().project('v','edges').by(\n",
    "      __.valueMap()).by(__.outE().valueMap().fold()).toList()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.V().has('ztf4','name','ztf4').outE().valueMap().unfold().toList()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'dict' object has no attribute 'traversal'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-195-b858c3645c50>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msubg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msubGraph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtraversal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwithRemote\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconnection\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m: 'dict' object has no attribute 'traversal'"
     ]
    }
   ],
   "source": [
    "subg = subGraph.traversal().withRemote(connection)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[v[73784], v[61480], v[57512], v[65704], v[118880], v[61608], v[98488], v[122976], v[110688], v[53400], v[69800], v[57496], v[57520], v[90296], v[114784], v[57384], v[94392], v[53424], v[69688], v[102584]]\n"
     ]
    }
   ],
   "source": [
    "test = g.V().toList()\n",
    "print(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '93c-j0g-74l-1248'}}][24640-is->49400],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'b32-j5c-74l-11xk'}}][24816-is->49160],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'o3l-1eko-2dx-1l14'}}][65544-knows->73912],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'npd-1eko-74l-1bew'}}][65544-is->61448],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'b2g-m68-2dx-j5c'}}][28736-knows->24816],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'ao8-m68-74l-11xk'}}][28736-is->49160],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'f14-vr4-74l-vm0'}}][41152-is->40968],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'c9k-pfk-2dx-cow'}}][32960-knows->16448],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'bvc-pfk-74l-mbc'}}][32960-is->28920],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '9i6-fzk-2dx-1epk'}}][20720-knows->65720],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '93y-fzk-74l-slc'}}][20720-is->37056],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'gld-yrs-2dx-1hvc'}}][45064-knows->69816],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'g75-yrs-74l-122o'}}][45064-is->49344],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'pp3-1hvc-74l-122o'}}][69816-is->49344],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'cny-mb4-74l-153c'}}][28912-is->53256],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '93h-fvs-74l-pgw'}}][20584-is->33008],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'h08-yww-2dx-j0g'}}][45248-knows->24640],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'gm0-yww-74l-1248'}}][45248-is->49400],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '5jc-cow-74l-mbc'}}][16448-is->28920],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '3yt-6g8-2dx-j5k'}}][8360-knows->24824],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '3kl-6g8-74l-1bjs'}}][8360-is->61624],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'ftr-vso-74l-sg8'}}][41208-is->36872],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '7j2-cts-2dx-9k8'}}][16624-knows->12392],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '74u-cts-74l-yyg'}}][16624-is->45304],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '5jy-9o0-2dx-pag'}}][12528-knows->32776],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '55q-9o0-74l-ph4'}}][12528-is->33016],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'g7z-smw-2dx-vso'}}][37112-knows->41208],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'ffj-smw-74l-sg8'}}][37112-is->36872],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'aan-j5k-74l-1bjs'}}][24824-is->61624],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '7ig-fuo-2dx-vr4'}}][20544-knows->41152],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '748-fuo-74l-vm0'}}][20544-is->40968],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '5jh-9k8-74l-yyg'}}][12392-is->45304],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'kxt-1894-2dx-fvs'}}][57352-knows->20584],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'kjl-1894-74l-pgw'}}][57352-is->33008],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'c8x-pag-74l-ph4'}}][32776-is->33016],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'r9z-1l14-74l-1bew'}}][73912-is->61448],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': 'o47-1epk-74l-slc'}}][65720-is->37056],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '7il-cq0-2dx-mb4'}}][16488-knows->28912],\n",
       " e[{'@type': 'janusgraph:RelationIdentifier', '@value': {'relationId': '74d-cq0-74l-153c'}}][16488-is->53256]]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.E().toList()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "v1 = g.addV('person').property('name', 'marko').next()\n",
    "v2 = g.addV('person').property('name', 'stephen').next()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['V', v[4104]], ['addE', 'knows'], ['to', v[4280]], ['property', 'weight', 0.75], ['none'], ['values', '_ipython_canary_method_should_not_exist_'], ['values', '_ipython_canary_method_should_not_exist_']]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.V(v1).addE('knows').to(v2).property('weight', 0.75).iterate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "marko = g.V().has('person','name','marko').next()\n",
    "peopleMarkoKnows = g.V().has('person','name','marko').out('knows').toList()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "v[8328]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.addV('person').property('name', 'sahil').next()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['V'], ['drop'], ['none'], ['values', '_ipython_canary_method_should_not_exist_'], ['values', '_ipython_canary_method_should_not_exist_']]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.V().drop().iterate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "v1 = g.addV('person').property('name', 'sahil').next()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hercules is 30 years old.\n"
     ]
    }
   ],
   "source": [
    "herculesAge = g.V().has('name', 'hercules').values('age').next()\n",
    "print('Hercules is {} years old.'.format(herculesAge))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "v[4160]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = graph.traversal().withRemote(DriverRemoteConnection('ws://localhost:8182/gremlin','g'))\n",
    "g.V().has('name', 'saturn').next()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'ConfiguredGraphFactory' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-31a60777bb81>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mConfiguredGraphFactory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgraphNames\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'ConfiguredGraphFactory' is not defined"
     ]
    }
   ],
   "source": [
    "ConfiguredGraphFactory.graphNames"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
